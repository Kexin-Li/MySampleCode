<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置整合 MyBatis
         1):前两部是所有项目都会用到的两个配置
         2):三四步是 MyBatis 整合 Spring 的精华.比如说:扫描机制
         3):趋势:约定大于配置-->

    <!-- 1:配置数据库相关参数 可以通过 ${url} 的形式来表示 properties 属性-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 2:配置数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- c3p0连接池私有属性 -->
        <!-- 每一个数据库连接池的池中最大数量,默认是15.现在的配置即是说最多保留 30 个 connection -->
        <property name="maxPoolSize" value="30"/>
        <!-- 池中的最小数量,默认是 3 -->
        <property name="minPoolSize" value="10"/>
        <!-- 当关闭连接后连接会被放入池子中,不自动 commit,默认是 false -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 当 maxPoolSize 用满的时候,连接等待的超时时间.也就是获取连接超时时间
             c3p0 的默认是 0,那么可能无限等待 -->
        <property name="checkoutTimeout" value="1000"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryDelay" value="2"/>
    </bean>

    <!-- 3:配置 SQLSessionFactory 对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置 MyBatis 全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描 entity 包,使用别名 -->
        <property name="typeAliasesPackage" value="org.seckill.entity"/>
        <!-- 扫描 SQL 配置文件:mapper 需要的 XML 文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 4:配置扫描 DAO 接口的包,目的是动态实现 DAO 接口,并注入到 Spring 容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入 sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 扫描 DAO 包 -->
        <property name="basePackage" value="org.seckill.dao"/>
    </bean>

    <!-- 注入 RedisDao -->
    <bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
        <constructor-arg index="0" value="localhost"/>
        <constructor-arg index="1" value="6379"/>
    </bean>

</beans>